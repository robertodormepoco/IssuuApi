<?php
/**
 *
 */

namespace Issuu\Models;

use Issuu\IssuuEnums\AbstractDocumentAccess;

/**
 * Class Document
 * @package Issuu\Models
 */
class Document {

    /**
     * Path to file
     *
     * @var string
     */
    protected $filePath;

    /**
     *  Value determining the URL address of the publication http://issuu.com/<username>/docs/<name>
     *  The name must be 3-50 characters long. Use lowercase letters (a-z), numbers (0-9) and characters (_.-)
     *  No spaces allowed
     *  This value must be unique for the account. In case no value is specified this name will be autogenerated
     *
     * @var string
     */
    protected $name;

    /**
     * Default $name or "file name" dunno yet
     *
     * @var string
     */
    protected $title;

    /**
     * @var array
     */
    protected $tags;

    /**
     * Default true
     *
     * @var boolean
     */
    protected $commentsAllowed;

    /**
     * Description of the document. If left blank the system will try to extract a summary of the content
     * Max length: 1000 characters
     *
     * @var string
     */
    protected $description;

    /**
     * Default false
     * @var boolean
     */
    protected $downloadable;

    /**
     * Info about this document
     *
     * @var string
     */
    protected $infoLink;

    /**
     * Language codes, more at http://developers.issuu.com/api/languagecodes.html
     *
     */
    protected $language;

    /**
     * Is document of public domain?
     *
     * @var AbstractDocumentAccess
     */
    protected $access;

    /**
     * This doc contains explicit content?
     *
     * @var boolean
     */
    protected $explicit;

    /**
     * Document category, more at http://developers.issuu.com/api/documentcategories.html
     *
     */
    protected $category;

    /**
     * Document type, more at http://developers.issuu.com/api/documenttypes.html
     *
     */
    protected $type;

    /**
     * Can other people rate this document? Default is true
     *
     * @var boolean
     */
    protected $ratingsAllowed;

    /**
     * Url to mp3 or m3u to listen to while viewing the document
     *
     * @var string
     */
    protected $soundUrl;

    /**
     * Publishing date, more at http://developers.issuu.com/api/dateformat.html for date formats
     *
     * @var \DateTime
     */
    protected $publishDate;

    /**
     * Folders to copy the document to when processing is done
     * Use method issuu.folders.list to find the id of a specific folder
     *
     * Method issuu.folders.list, more at developers.issuu.com/pages/issuu.folders.list.html
     *
     * @var array
     */
    protected $folderIds;

    /**
     * Format of the response
     * Must be "xml" or "json", default "xml"
     *
     */
    protected $format;

    /**
     * JSONP callback
     *
     * @var string
     */
    protected $jsonCallback;

    /**
     * @param \Issuu\IssuuEnums\AbstractDocumentAccess $access
     */
    public function setAccess($access)
    {
        $this->access = $access;
    }

    /**
     * @return \Issuu\IssuuEnums\AbstractDocumentAccess
     */
    public function getAccess()
    {
        return $this->access;
    }

    /**
     */
    public function setCategory($category)
    {
        $this->category = $category;
    }

    /**
     */
    public function getCategory()
    {
        return $this->category;
    }

    /**
     * @param boolean $commentsAllowed
     */
    public function setCommentsAllowed($commentsAllowed)
    {
        $this->commentsAllowed = $commentsAllowed;
    }

    /**
     * @return boolean
     */
    public function getCommentsAllowed()
    {
        return $this->commentsAllowed;
    }

    /**
     * @param string $description
     */
    public function setDescription($description)
    {
        $this->description = $description;
    }

    /**
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * @param boolean $downloadable
     */
    public function setDownloadable($downloadable)
    {
        $this->downloadable = $downloadable;
    }

    /**
     * @return boolean
     */
    public function getDownloadable()
    {
        return $this->downloadable;
    }

    /**
     * @param boolean $explicit
     */
    public function setExplicit($explicit)
    {
        $this->explicit = $explicit;
    }

    /**
     * @return boolean
     */
    public function getExplicit()
    {
        return $this->explicit;
    }

    /**
     * @param string $filePath
     */
    public function setFilePath($filePath)
    {
        $this->filePath = $filePath;
    }

    /**
     * @return string
     */
    public function getFilePath()
    {
        return $this->filePath;
    }

    /**
     * @param array $folderIds
     */
    public function setFolderIds($folderIds)
    {
        $this->folderIds = $folderIds;
    }

    /**
     * @return array
     */
    public function getFolderIds()
    {
        return $this->folderIds;
    }

    /**
     */
    public function setFormat($format)
    {
        $this->format = $format;
    }

    /**
     */
    public function getFormat()
    {
        return $this->format;
    }

    /**
     * @param string $infoLink
     */
    public function setInfoLink($infoLink)
    {
        $this->infoLink = $infoLink;
    }

    /**
     * @return string
     */
    public function getInfoLink()
    {
        return $this->infoLink;
    }

    /**
     * @param string $jsonCallback
     */
    public function setJsonCallback($jsonCallback)
    {
        $this->jsonCallback = $jsonCallback;
    }

    /**
     * @return string
     */
    public function getJsonCallback()
    {
        return $this->jsonCallback;
    }

    /**
     */
    public function setLanguage($language)
    {
        $this->language = $language;
    }

    /**
     */
    public function getLanguage()
    {
        return $this->language;
    }

    /**
     * @param string $name
     */
    public function setName($name)
    {
        $this->name = $name;
    }

    /**
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * @param \DateTime $publishDate
     */
    public function setPublishDate($publishDate)
    {
        $this->publishDate = $publishDate;
    }

    /**
     * @return \DateTime
     */
    public function getPublishDate()
    {
        return $this->publishDate;
    }

    /**
     * @param boolean $ratingsAllowed
     */
    public function setRatingsAllowed($ratingsAllowed)
    {
        $this->ratingsAllowed = $ratingsAllowed;
    }

    /**
     * @return boolean
     */
    public function getRatingsAllowed()
    {
        return $this->ratingsAllowed;
    }

    /**
     * @param string $soundUrl
     */
    public function setSoundUrl($soundUrl)
    {
        $this->soundUrl = $soundUrl;
    }

    /**
     * @return string
     */
    public function getSoundUrl()
    {
        return $this->soundUrl;
    }

    /**
     * @param array $tags
     */
    public function setTags($tags)
    {
        $this->tags = $tags;
    }

    /**
     * @return array
     */
    public function getTags()
    {
        return $this->tags;
    }

    /**
     * @param string $title
     */
    public function setTitle($title)
    {
        $this->title = $title;
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     */
    public function setType($type)
    {
        $this->type = $type;
    }

    /**
     */
    public function getType()
    {
        return $this->type;
    }

    public function getParameters(){

        $parameters = array();

        $reflector = new \ReflectionClass('Issuu\Models\Document');

        $vars = $reflector->getProperties();

        foreach($vars as $var){
            if($var->getName() != 'filePath') {
                $var->setAccessible(true);
                if($var->getValue($this) != null) $parameters[$var->getName()] = $var->getValue($this);
                $var->setAccessible(false);
            }
        }

        return $parameters;
    }

}